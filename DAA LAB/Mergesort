import java.util.Scanner;
import java.util.Random;
class mergesort
{
	public static void main(String[] args) 
	{
		Scanner scan=new Scanner(System.in);
		Random ran=new Random();
		long start,stop;
		System.out.print("Enter no of elements = ");
		int n=scan.nextInt();
		int[] a=new int[n];
        System.out.print("\n1: Best Case  2: Average Case  3:  Worst Case \nEnter the choice = ");
		int ch=scan.nextInt();
		switch(ch)
		{
			case 1: System.out.println("\nBest Case");
					for(int i=0;i<n;i++)
						a[i]=i;
				break;
		   	case 2: System.out.println("\nAverage Case");
					for(int i=0;i<n;i++)
						a[i]=ran.nextInt(n);
				break;
		   	case 3: System.out.println("\nWorst Case");
					for(int i=0;i<n;i++)
						a[i]=n-i;
				break;		
			
		}
		start=System.nanoTime();
		Mergesort(a,0,n-1);
		stop=System.nanoTime();
        System.out.println("Time taken to sort " +a.length+ " elements = " +(stop-start));
    }
	public static void Mergesort(int[] a, int low, int high)
	{
		int mid;
		if(low<high)
		{
			mid=(low+high)/2;
			Mergesort(a, low, mid);
			Mergesort(a, mid+1, high);
			Merge(a,low,mid,high);
		}
	}
	public static void Merge(int[] arr,int low,int mid,int high) 
	{
		int k,h=low,i=low,j=mid+1;
		int[] b=new int[arr.length];
		while(h<=mid && j<=high)
		{
			if(arr[h]<=arr[j])
			{
				b[i]=arr[h];
				h++;
			}
			else
			{
				b[i]=arr[j];
				j++;
			}
			i++;
		}
		if(h>mid)
		{
			for(k=j;k<=high;k++)
			{
				b[i]=arr[k];
				i++;
			}
		}
		else
		{
			for(k=h;k<=mid;k++)
			{
				b[i]=arr[k];
				i++;
			}		
		}
		for(k=low;k<=high;k++)
			arr[k]=b[k];
	}
}
